import numpy as np
import pandas as pd
import requests
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors
from datetime import datetime, timedelta
import math
import folium
import polyline

# === 1. Data Configuration ===
df_schools = pd.read_csv(
    "C:/Users/ASUS/PycharmProjects/爬取多多买菜评论/results/schools_info_Kedungwaru.csv")  # Contains 'latitude', 'longitude', 'demand'
central_kitchen = (-8.0506983, 111.911565)
BATCH_SIZE = 10  # Google API request batch size limit for schools
API_KEY = "AIzaSyAQMFuzox8FMM5xz_iKys68qYjs_cjsN04"  # Google Distance Matrix API Key

MAX_DELIVERY_TIME = 90  # Maximum delivery time for each cluster area (minutes)
MAX_CAPACITY = 400  # Maximum delivery capacity for each cluster area
MAX_SCHOOLS = 20  # Maximum number of schools served by the catering center
START_TIME = datetime.strptime("9:30", "%H:%M")  # Delivery start time

# Service time linear function
def calculate_service_time(demand):
    base_time = 10  # Base time (minutes)
    time_per_person  = 0.02  # Additional time per person
    return base_time + time_per_person  * demand

# === 2. Get Delivery Times ===
def get_batch_travel_times(origins, destinations):
    origins_str = "|".join([f"{lat},{lng}" for lat, lng in origins])
    destinations_str = "|".join([f"{lat},{lng}" for lat, lng in destinations])

    url = f"https://maps.googleapis.com/maps/api/distancematrix/json?origins={origins_str}&destinations={destinations_str}&key={API_KEY}"
    response = requests.get(url)
    data = response.json()

    travel_times = []
    if data["status"] == "OK":
        for row in data["rows"]:
            travel_times.append(
                [elem["duration"]["value"] / 60 if elem["status"] == "OK" else np.inf for elem in row["elements"]]
            )
    else:
        travel_times = [[np.inf] * len(destinations)] * len(origins)

    return travel_times


# Initialize delivery and return times
df_schools["delivery_time"] = np.nan
df_schools["return_time"] = np.nan
df_schools["service_time"] = df_schools["demand"].apply(calculate_service_time)

for i in range(0, len(df_schools), BATCH_SIZE):
    batch = df_schools.iloc[i:i + BATCH_SIZE]
    origins = [(central_kitchen[0], central_kitchen[1])] * len(batch)
    destinations = list(zip(batch["latitude"], batch["longitude"]))

    travel_times = get_batch_travel_times(origins, destinations)
    df_schools.loc[batch.index, "delivery_time"] = [time[0] for time in travel_times]

    # Calculate return times
    return_times = get_batch_travel_times(destinations, origins)
    df_schools.loc[batch.index, "return_time"] = [time[0] for time in return_times]

df_schools["total_time"] = df_schools["delivery_time"] + df_schools["service_time"]

# === 3. Select Most Suitable Schools ===
# Sort by delivery time
df_schools = df_schools.sort_values("total_time")

# Select the first MAX_SCHOOLS schools
selected_schools = df_schools.head(MAX_SCHOOLS).copy()
rejected_schools = df_schools.tail(len(df_schools) - MAX_SCHOOLS).copy()


# === 4. Improved Constraint-Based Clustering ===
def get_euclidean_distance(point1, point2):
    """Calculate Euclidean distance between two points"""
    return math.sqrt(
        (point1[0] - point2[0]) ** 2 + (point1[1] - point2[1]) ** 2) * 111  # Rough conversion to kilometers

def improved_constrained_clusters(schools_df, central_kitchen, max_time=MAX_DELIVERY_TIME, max_capacity=MAX_CAPACITY):
    """Improved cluster creation based on savings algorithm"""
    clusters = []
    travel_time_cache = {}

    # Create a dictionary to record which route each school belongs to
    school_to_route = {}

    def get_cached_travel_time(origin, destination):
        """Get travel time from cache, or via API if not exists"""
        key = (origin, destination)
        if key in travel_time_cache:
            return travel_time_cache[key]

        # Use Google Maps Distance Matrix API to get travel time
        origins_str = f"{origin[0]},{origin[1]}"
        destinations_str = f"{destination[0]},{destination[1]}"
        url = f"https://maps.googleapis.com/maps/api/distancematrix/json?origins={origins_str}&destinations={destinations_str}&key={API_KEY}"

        try:
            response = requests.get(url, timeout=10)
            data = response.json()

            if data["status"] == "OK" and data["rows"][0]["elements"][0]["status"] == "OK":
                travel_time = data["rows"][0]["elements"][0]["duration"]["value"] / 60  # Convert seconds to minutes
                travel_time_cache[key] = travel_time
                travel_time_cache[(destination, origin)] = travel_time  # Assume bidirectional equality
                return travel_time
            else:
                print(f"API Error: {data['status']}")
                return np.inf
        except Exception as e:
            print(f"Request Error: {e}")
            return np.inf

    # Initialize separate paths for each school
    routes = []
    for idx, school in enumerate(schools_df.iterrows()):
        school_idx, school_data = school
        school_location = (school_data["latitude"], school_data["longitude"])

        # Calculate Euclidean distance to central kitchen
        distance_to_kitchen = get_euclidean_distance(central_kitchen, school_location)

        route = {
            # Start explicitly with central kitchen, then to school
            "path": [central_kitchen, school_location],
            "total_time": get_cached_travel_time(central_kitchen, school_location) + school_data["service_time"],
            "total_capacity": school_data["demand"],
            "schools": [school_data],
            "school_indices": [school_idx],  # Add school indices for better reference
            "distance": distance_to_kitchen * 2  # Round-trip distance
        }
        routes.append(route)
        school_to_route[school_idx] = len(routes) - 1  # Record which route contains this school

    # Calculate savings values and sort
    savings = []
    for i, route_i in enumerate(routes):
        for j, route_j in enumerate(routes):
            if i != j:
                # Get positions in the routes
                loc_i = route_i["path"][1]  # School position in route i
                loc_j = route_j["path"][1]  # School position in route j

                # Use Euclidean distance to calculate savings (optimization calculation)
                direct_distance = get_euclidean_distance(loc_i, loc_j)

                # Calculate savings: distance of visiting two points separately minus distance of going directly from one point to another
                # Higher value means combining these two points in one route is more cost-effective
                saving = (
                        get_euclidean_distance(central_kitchen, loc_i) +
                        get_euclidean_distance(central_kitchen, loc_j) -
                        direct_distance
                )

                # Add geographic proximity weight (prioritize combining geographically close schools)
                geographic_weight = 1.0 / (direct_distance + 0.1)  # Avoid division by zero
                weighted_saving = saving * geographic_weight

                if saving > 0:  # Only add positive savings
                    savings.append((weighted_saving, i, j, saving))

    # Sort by weighted savings in descending order
    savings.sort(reverse=True, key=lambda x: x[0])

    # Improved route merging strategy
    merged_routes = set()  # Track merged routes

    for _, i, j, actual_saving in savings:
        if i in merged_routes or j in merged_routes:
            continue  # Skip already merged routes

        if i >= len(routes) or j >= len(routes):  # Check if indices are valid
            continue

        route_i = routes[i]
        route_j = routes[j]

        # Get the last position of one route and first position of another
        loc_i = route_i["path"][-1]  # Last school position
        loc_j = route_j["path"][1]  # First school position (index 1, as 0 is central kitchen)

        # Calculate time and capacity constraints
        travel_time_between = get_cached_travel_time(loc_i, loc_j)

        # More precise time calculation (considering path order)
        time_from_kitchen_to_i_schools = route_i["total_time"] - get_cached_travel_time(route_i["path"][-1],
                                                                                        central_kitchen)
        time_from_j_schools_to_kitchen = get_cached_travel_time(route_j["path"][-1], central_kitchen)

        new_total_time = (
                time_from_kitchen_to_i_schools +
                travel_time_between +
                route_j["total_time"] -
                get_cached_travel_time(central_kitchen, loc_j)  # Subtract duplicated time calculation
        )

        new_total_capacity = route_i["total_capacity"] + route_j["total_capacity"]

        # Check constraints
        if new_total_time <= max_time and new_total_capacity <= max_capacity:
            # Merge routes - maintain path continuity
            combined_path = route_i["path"].copy()  # Copy route_i's path
            # Add route_j's path points (except the first point, which is the central kitchen)
            combined_path.extend(route_j["path"][1:])

            # Calculate total distance of the new path
            total_distance = 0
            for k in range(len(combined_path) - 1):
                total_distance += get_euclidean_distance(combined_path[k], combined_path[k + 1])
            # Add distance from last school back to central kitchen
            total_distance += get_euclidean_distance(combined_path[-1], central_kitchen)

            route_i["path"] = combined_path
            route_i["total_time"] = new_total_time
            route_i["total_capacity"] = new_total_capacity
            route_i["schools"].extend(route_j["schools"])  # Merge school lists
            route_i["school_indices"].extend(route_j["school_indices"])  # Merge school indices
            route_i["distance"] = total_distance  # Update distance

            # Update all school mappings moving from route_j to route_i
            for school_idx in route_j["school_indices"]:
                school_to_route[school_idx] = i  # Update to new path

            # Mark j as merged
            merged_routes.add(j)

    # Filter out merged paths
    final_routes = [route for idx, route in enumerate(routes) if idx not in merged_routes]

    # Save results
    for cluster_id, route in enumerate(final_routes):
        # Create complete pathways to ensure that the central kitchen is the starting and ending point
        complete_path = []

        # Add all points in the route
        for loc in route["path"]:
            complete_path.append(loc)

        # Ensure that the central kitchen is the last point (if not)
        if complete_path[-1] != central_kitchen:
            complete_path.append(central_kitchen)

        # Calculate the return time from the last school to the central kitchen
        last_school = route["path"][-1]
        return_time = get_cached_travel_time(last_school, central_kitchen)

        # Recalculate total path distance
        total_distance = 0
        for i in range(len(complete_path) - 1):
            total_distance += get_euclidean_distance(complete_path[i], complete_path[i + 1])

        clusters.append({
            "cluster_id": cluster_id,
            "path": complete_path,  # Complete pathways, including centralized kitchens at the start and end points
            "total_time": route["total_time"],
            "total_capacity": route["total_capacity"],
            "return_time": return_time,
            "total_time_with_return": route["total_time"] + return_time,
            "distance": total_distance,
            "schools": route["schools"],
            "school_indices": route["school_indices"]
        })

    return clusters

constrained_clusters = improved_constrained_clusters(selected_schools, central_kitchen)


# === 5. Recording results ===
def update_schools_clustering_with_return_time(df_schools, constrained_clusters, central_kitchen):
    """Update school data frame to include clustering information, path order and return time"""
    # Duplicate school data frame
    updated_df = df_schools.copy()

    # Unassigned by default
    updated_df["cluster"] = -1
    updated_df["stop_order"] = -1

    # Updated information for schools in each cluster
    for cluster in constrained_clusters:
        cluster_id = cluster["cluster_id"]

        # Get the order of schools in the path
        path_schools = cluster["school_indices"]

        # Update school cluster IDs and visit order
        for i, school_idx in enumerate(path_schools):
            updated_df.loc[school_idx, "cluster"] = cluster_id
            updated_df.loc[school_idx, "stop_order"] = i + 1  # 顺序从1开始计数

    return updated_df

df_result = update_schools_clustering_with_return_time(df_schools, constrained_clusters, central_kitchen)


# === 6. Create visualization charts ===
def create_improved_visualization(df_result, central_kitchen, constrained_clusters, total_schools, selected_schools):
    """Create visualization charts with school count information"""
    plt.figure(figsize=(12, 10))

    # Extract all coordinate points to display
    all_lats = [central_kitchen[0]]  # Central kitchen latitude
    all_lons = [central_kitchen[1]]  # Central kitchen longitude

    for _, row in df_result[df_result['cluster'] >= 0].iterrows():
        all_lats.append(row['latitude'])
        all_lons.append(row['longitude'])

    # Calculate relative coordinates (in the range 0-20)
    min_lat, max_lat = min(all_lats), max(all_lats)
    min_lon, max_lon = min(all_lons), max(all_lons)

    # Coordinate conversion functions
    def convert_to_relative(lat, lon):
        # Mapping latitude and longitude ranges to 0-20
        rel_x = 20 * (lon - min_lon) / (max_lon - min_lon) if max_lon != min_lon else 0
        rel_y = 20 * (lat - min_lat) / (max_lat - min_lat) if max_lat != min_lat else 0
        return rel_x, rel_y

    # Converted central kitchen coordinates
    kitchen_x, kitchen_y = convert_to_relative(central_kitchen[0], central_kitchen[1])

    # Create a dictionary of school coordinates
    school_coords = {}
    for idx, row in df_result[df_result['cluster'] >= 0].iterrows():
        x, y = convert_to_relative(row['latitude'], row['longitude'])
        school_coords[idx] = (x, y)

    # Use different color schemes
    distinct_colors = ['blue', 'red', 'green', 'olive', 'purple', 'teal', 'orange', 'brown']

    # Plot the path of each cluster
    for i, cluster in enumerate(constrained_clusters):
        cluster_id = cluster["cluster_id"]
        color = distinct_colors[cluster_id % len(distinct_colors)]

        # Create full paths
        path = []
        path.append((kitchen_x, kitchen_y))  # Starting from the central kitchen

        # Add schools in sequence
        for school_idx in cluster["school_indices"]:
            path.append(school_coords[school_idx])

        path.append((kitchen_x, kitchen_y))  # Back to the central kitchen

        # Draw path lines
        xs, ys = zip(*path)
        plt.plot(xs, ys, '-', color=color, linewidth=2)

        # Mark school nodes and order on the path
        for j, (x, y) in enumerate(path[1:-1], 0):
            plt.plot(x, y, 'o', color=color, markersize=8)
            # Add school number
            school_idx = cluster["school_indices"][j]
            plt.text(x, y, str(school_idx), fontsize=10, ha='center', va='bottom')

        # Add arrows to mark the delivery order
        for j in range(len(path) - 1):
            dx = path[j + 1][0] - path[j][0]
            dy = path[j + 1][1] - path[j][1]

            # Calculate the position of the arrow (about 20% from the midpoint)
            arrow_x = path[j][0] + dx * 0.4
            arrow_y = path[j][1] + dy * 0.4

            # Calculating arrow directions
            arrow_length = 0.5
            arrow_dx = dx * arrow_length / math.sqrt(dx ** 2 + dy ** 2)
            arrow_dy = dy * arrow_length / math.sqrt(dx ** 2 + dy ** 2)

            # Draw arrows
            plt.arrow(arrow_x, arrow_y, arrow_dx, arrow_dy,
                      head_width=0.4, head_length=0.6, fc=color, ec=color)

    # Mark the central kitchen
    plt.plot(kitchen_x, kitchen_y, 's', color='black', markersize=10)
    plt.text(kitchen_x, kitchen_y, '0', fontsize=10, ha='center', va='bottom')

    # Set chart properties
    plt.xlim(0, 20)
    plt.ylim(0, 20)
    plt.xlabel('X')
    plt.ylabel('Y')

    # Add school count information to the title
    plt.title(
        f'School Delivery Routes Optimization\nTotal Schools: {total_schools}, Selected Schools: {selected_schools}',
        fontsize=14)
    plt.grid(True, linestyle='--', alpha=0.7)

    # Calculate total route length and total demand
    total_distance = sum(cluster["distance"] for cluster in constrained_clusters)

    # Calculate path information
    route_distances = [round(cluster["distance"], 2) for cluster in constrained_clusters]
    route_demands = [round(cluster["total_capacity"] , 1) for cluster in constrained_clusters]

    # Construct optimal program strings
    optimal_routes = []
    for cluster in constrained_clusters:
        route = [0]  # Starting from the central kitchen
        route.extend(cluster["school_indices"])
        route.append(0)  # Back to the central kitchen
        optimal_routes.append(route)

    # Combine all paths into a display list
    all_routes = []
    for r in optimal_routes:
        if len(all_routes) > 0 and all_routes[-1] == 0:
            all_routes.extend(r[1:])  # 不重复添加0
        else:
            all_routes.extend(r)

    # Add statistical information below the chart
    plt.figtext(0.5, 0.01,
                f"Minimum Value {round(total_distance, 1)}, Optimal Solution {all_routes}\n"
                f"Length of each line: {route_distances}\n"
                f"Delivery Capacity per line: {route_demands}",
                ha="center", fontsize=10, bbox={"facecolor": "lightgray", "alpha": 0.5, "pad": 5})

    return plt


# === 7. Generate and save a new visualization with school count information ===
# Get total and selected school counts
total_schools_count = len(df_schools)
selected_schools_count = len(selected_schools)

plt_obj = create_improved_visualization(df_result, central_kitchen, constrained_clusters,
                                        total_schools_count, selected_schools_count)
plt_obj.savefig('school_routes_visualization.png', dpi=300, bbox_inches='tight')
plt.close()

print("The visualization chart has been saved as school_routes_visualization.png")

# === 8. Output statistics ===
print("\n=== Clustering statistical information ===")
print(f"Total Schools: {total_schools_count}")
print(f"Selected Schools: {selected_schools_count}")
print("Cluster_Number | School_Numbers | Total_Time (minutes) | Total_Capacity | Route_Length")

# Calculate total statistics
total_distance = 0

for cluster in constrained_clusters:
    cluster_id = cluster["cluster_id"]
    num_schools = len(cluster["school_indices"])
    total_time = cluster["total_time_with_return"]
    total_capacity = cluster["total_capacity"]
    distance = cluster["distance"]
    total_distance += distance

    print(f"{cluster_id:>8} | {num_schools:>8} | {total_time:>16.2f} | {total_capacity:>6} | {distance:>8.2f}")

print(f"\nMinimum Value: {total_distance:.1f}")

# Construct optimal program strings
all_routes = []
for cluster in constrained_clusters:
    route = [0]  # Starting from the central kitchen
    route.extend(cluster["school_indices"])
    route.append(0)  # Back to the central kitchen
    all_routes.extend(route[:-1] if all_routes else route)
if all_routes[-1] != 0:
    all_routes.append(0)

print(f"Optimal Solution: {all_routes}")
print(f"Length of each line: {[round(cluster['distance'], 2) for cluster in constrained_clusters]}")
print(f"Delivery Capacity per line: {[round(cluster['total_capacity'] / 100, 1) for cluster in constrained_clusters]}")


# === 9. Enhanced Detailed School Data Output ===
def generate_detailed_school_report(df_result, constrained_clusters, start_time=START_TIME):
    """
    Generate a comprehensive report with detailed information for each school including delivery times
    """
    # Create a detailed DataFrame for reporting
    detailed_report = []

    for cluster in constrained_clusters:
        cluster_id = cluster["cluster_id"]
        current_time = start_time

        for idx, school_data in enumerate(cluster["schools"]):
            school_idx = cluster["school_indices"][idx]
            school_row = df_result.loc[school_idx]

            # Calculate precise timing for each school
            delivery_time = school_row['delivery_time']
            service_time = school_row['service_time']
            return_time = school_row['return_time']
            total_route_time = delivery_time + service_time + return_time

            # Calculate start and end times
            delivery_start_time = current_time
            service_start_time = delivery_start_time + timedelta(minutes=delivery_time)
            service_end_time = service_start_time + timedelta(minutes=service_time)
            delivery_end_time = service_end_time + timedelta(minutes=return_time)

            detailed_report.append({
                'Cluster': cluster_id,
                'School Index': school_idx,
                'School Name': school_row.get('name', 'N/A'),  # Updated to use 'name' column
                'NPSN': school_row.get('npsn', 'N/A'),
                'Latitude': school_row['latitude'],
                'Longitude': school_row['longitude'],
                'Demand': school_row['demand'],
                'Delivery Start Time': delivery_start_time.strftime("%H:%M"),
                'Service Start Time': service_start_time.strftime("%H:%M"),
                'Service End Time': service_end_time.strftime("%H:%M"),
                'Delivery End Time': delivery_end_time.strftime("%H:%M"),
                'Delivery Time (mins)': round(delivery_time, 2),
                'Service Time (mins)': round(service_time, 2),
                'Return Time (mins)': round(return_time, 2),
                'Total Route Time (mins)': round(total_route_time, 2),
                'Stop Order in Cluster': idx + 1
            })

            # Update current time for next school
            current_time = delivery_end_time

    # Convert to DataFrame for easy viewing and export
    detailed_df = pd.DataFrame(detailed_report)

    # Save to CSV
    detailed_df.to_csv('detailed_school_routes(OSRM).csv', index=False)

    # Pretty print to console
    print("\n=== Detailed School Route Information ===")
    print(detailed_df.to_string(index=False))

    return detailed_df

# === 10. Google Maps Interactive Route Visualization ===
def create_osrm_maps_visualization(df_result, constrained_clusters, central_kitchen, MAX_DELIVERY_TIME, MAX_CAPACITY,
                                   start_time=START_TIME, osrm_server="http://router.project-osrm.org"):
    """
    Create an interactive map visualization of school routes using OSRM for real road network routes

    Parameters:
    -----------
    df_result : pandas DataFrame
        DataFrame containing school information
    constrained_clusters : list
        List of clusters with school indices
    central_kitchen : tuple
        (latitude, longitude) of central kitchen
    MAX_DELIVERY_TIME : int
        Maximum delivery time constraint
    MAX_CAPACITY : int
        Maximum capacity constraint
    start_time : datetime
        Start time for deliveries
    osrm_server : str
        URL of OSRM server (default uses public OSRM demo server)
    """
    import folium
    from datetime import timedelta
    import requests
    import time
    import json

    # Create a map centered on the central kitchen
    m = folium.Map(location=[central_kitchen[0], central_kitchen[1]], zoom_start=10)

    # Distinct colors for different clusters
    colors = ['red', 'blue', 'green', 'purple', 'orange', 'darkred', 'lightred', 'beige']

    # Calculate aggregate statistical information
    total_schools = len(df_result)
    selected_schools = len(df_result[df_result['cluster'] >= 0])
    total_clusters = len(constrained_clusters)

    # Calculate total delivery time
    overall_start_time = start_time
    overall_end_time = start_time

    # Track total delivery time for all routes
    for cluster in constrained_clusters:
        cluster_end_time = start_time
        for school_idx in cluster["school_indices"]:
            school_data = df_result.loc[school_idx]
            delivery_time = school_data['delivery_time']
            service_time = school_data['service_time']

            # Calculate the completion time for this school
            cluster_end_time += timedelta(minutes=delivery_time + service_time)

        # Update the overall end time (if this cluster ends later)
        if cluster_end_time > overall_end_time:
            overall_end_time = cluster_end_time

    # Calculate total delivery time without return time (minutes)
    total_delivery_duration = (overall_end_time - overall_start_time).total_seconds() / 60

    # Add centralized kitchen marking
    central_kitchen_popup = f"""
    <div style='font-family: Arial, sans-serif; max-width: 300px;'>
    <h3 style='color: #333;'>Central Kitchen Details</h3>
    <p><strong>Location:</strong> {central_kitchen[0]}, {central_kitchen[1]}<br>
    <strong>Total Schools Analyzed:</strong> {len(df_result)}<br>
    <strong>Selected Schools:</strong> {len(df_result[df_result['cluster'] >= 0])}<br>
    <strong>Clusters Formed:</strong> {len(constrained_clusters)}<br>
    <strong>Delivery Constraints:</strong><br>
    - Max Delivery Time: {MAX_DELIVERY_TIME} mins<br>
    - Max Capacity: {MAX_CAPACITY} per cluster<br>
    <strong>Delivery Start Time:</strong> {start_time.strftime("%H:%M")}<br>
    <strong>Delivery End Time:</strong> {overall_end_time.strftime("%H:%M")}
    </p>
    </div>
    """

    folium.Marker(
        location=central_kitchen,
        popup=folium.Popup(central_kitchen_popup, max_width=350),
        icon=folium.Icon(color='black', icon='home')
    ).add_to(m)

    # Add general information controls to the map
    summary_html = f"""
    <div style='
        position: fixed; 
        bottom: 10px; 
        left: 10px; 
        z-index: 9999; 
        background-color: white; 
        border: 2px solid #ccc; 
        border-radius: 5px; 
        padding: 10px; 
        font-family: Arial, sans-serif; 
        max-width: 350px;
        box-shadow: 0 0 10px rgba(0,0,0,0.1);
    '>
        <h3 style='color: #333; margin-top: 0;'>Detailed Delivery Information</h3>
        <hr style='border-top: 1px solid #ddd; margin: 5px 0;'>
        <p style='margin: 5px 0;'>
        <strong>Total Schools:</strong> {total_schools}<br>
        <strong>Selected Schools:</strong> {selected_schools}<br>
        <strong>Clusters Number:</strong> {total_clusters}<br>
        <strong>Overall Delivery Start Time:</strong> {overall_start_time.strftime("%H:%M")}<br>
        <strong>Overall Delivery End Time:</strong> {overall_end_time.strftime("%H:%M")}<br>
        <strong>Total Duration:</strong> {total_delivery_duration:.2f} mins
        </p>
    </div>
    """

    # Add summary information to the map
    m.get_root().html.add_child(folium.Element(summary_html))

    # Track total distribution time (for each school's time calculations)
    total_delivery_time = start_time

    # Function to get route between two points using OSRM
    def get_osrm_route(origin, destination):
        # OSRM expects coordinates in format: longitude,latitude (opposite of usual)
        url = f"{osrm_server}/route/v1/driving/{origin[1]},{origin[0]};{destination[1]},{destination[0]}"
        params = {
            "overview": "full",
            "geometries": "geojson"
        }

        try:
            response = requests.get(url, params=params)
            data = response.json()

            if data["code"] == "Ok":
                # Extract coordinates from the route geometry
                coordinates = data["routes"][0]["geometry"]["coordinates"]
                # OSRM returns [longitude, latitude], but folium needs [latitude, longitude]
                route_points = [[coord[1], coord[0]] for coord in coordinates]
                return route_points
            else:
                print(f"Error fetching OSRM route: {data['code']}")
                return [origin, destination]  # Fallback to straight line
        except Exception as e:
            print(f"Error fetching OSRM route: {e}")
            return [origin, destination]  # Fallback to straight line

    for cluster_idx, cluster in enumerate(constrained_clusters):
        # Choose a color for this cluster
        cluster_color = colors[cluster_idx % len(colors)]

        # Track cluster-specific details
        cluster_schools = []
        cluster_details = []

        # Get ordered list of points (including central kitchen at start and end)
        ordered_points = [central_kitchen]
        for school_idx in cluster["school_indices"]:
            school_data = df_result.loc[school_idx]
            school_location = (school_data['latitude'], school_data['longitude'])
            ordered_points.append(school_location)
        ordered_points.append(central_kitchen)  # Return to central kitchen

        # Add markers for each school in this cluster
        for idx, school_idx in enumerate(cluster["school_indices"]):
            school_data = df_result.loc[school_idx]

            # Calculate delivery times
            delivery_time = school_data['delivery_time']
            service_time = school_data['service_time']
            return_time = school_data['return_time']

            # Calculate precise times
            delivery_start_time = total_delivery_time
            service_start_time = delivery_start_time + timedelta(minutes=delivery_time)
            service_end_time = service_start_time + timedelta(minutes=service_time)
            delivery_end_time = service_end_time + timedelta(minutes=return_time)

            # Update for next iteration
            total_delivery_time = delivery_end_time

            details = {
                'name': school_data['name'],
                'delivery_start': delivery_start_time.strftime("%H:%M"),
                'service_start': service_start_time.strftime("%H:%M"),
                'service_end': service_end_time.strftime("%H:%M"),
                'delivery_end': delivery_end_time.strftime("%H:%M"),
                'demand': school_data['demand']
            }

            # Add school details for popup
            cluster_schools.append(school_data['name'])
            cluster_details.append(details)

            # Create detailed popup for each school
            school_popup = f"""
            <div style='font-family: Arial, sans-serif; max-width: 300px;'>
            <h3 style='color: #{cluster_color};'>School Details</h3>
            <p>
            <strong>Name:</strong> {details['name']}<br>
            <strong>NPSN:</strong> {school_data.get('npsn', 'N/A')}<br>
            <strong>Location:</strong> {school_data['latitude']}, {school_data['longitude']}<br>
            <strong>Demand:</strong> {details['demand']}<br>
            <strong>Cluster:</strong> {cluster_idx}<br>
            <br>
            <strong>Delivery Schedule:</strong><br>
            - Delivery Start: {details['delivery_start']}<br>
            - Service Start: {details['service_start']}<br>
            - Service End: {details['service_end']}<br>
            - Delivery End: {details['delivery_end']}
            </p>
            </div>
            """

            folium.Marker(
                location=(school_data['latitude'], school_data['longitude']),
                popup=folium.Popup(school_popup, max_width=350),
                icon=folium.Icon(color=cluster_color, icon='info-sign')
            ).add_to(m)

        # Cluster route detailed popup
        route_popup = f"""
        <div style='font-family: Arial, sans-serif; max-width: 350px;'>
        <h3 style='color: #{cluster_color};'>Cluster {cluster_idx} Route Details</h3>
        <hr style='border-top: 1px solid #ddd;'>
        <p>
        <strong>Schools in Cluster:</strong> {len(cluster['school_indices'])}<br>
        <strong>School Names:</strong> {', '.join(cluster_schools)}<br>
        <strong>Total Delivery Time:</strong> {cluster['total_time_with_return']:.2f} mins<br>
        <strong>Total Capacity:</strong> {cluster['total_capacity']}<br>
        <strong>Route Distance:</strong> {cluster['distance']:.2f} km
        </p>
        </div>
        """

        # For each segment of the route, get the actual road path
        for i in range(len(ordered_points) - 1):
            origin = ordered_points[i]
            destination = ordered_points[i + 1]

            # Get route points using OSRM
            route_points = get_osrm_route(origin, destination)

            # Add small delay to avoid hitting rate limits
            time.sleep(0.2)

            # Add route segment to map
            folium.PolyLine(
                locations=route_points,
                color=cluster_color,
                weight=2,
                opacity=0.8,
                popup=folium.Popup(route_popup, max_width=350) if i == 0 else None
            ).add_to(m)

    # Save the map with comprehensive details
    m.save('school_routes_map(OSRM).html')
    print("Interactive route map saved as school_routes_map.html with real road network routes using OSRM")

    return m

create_osrm_maps_visualization(
    df_result,
    constrained_clusters,
    central_kitchen,
    MAX_DELIVERY_TIME,
    MAX_CAPACITY
)
